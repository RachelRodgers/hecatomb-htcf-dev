"""
The snakefile that runs hecatomb.

This snakefile automatically calls the snakefiles in [rules](rules) to figure out the path.

Rob Edwards, October 2020
"""


import os
import sys
import socket


"""
Summary:
    # Step 0: Clumpify reads (https://jgi.doe.gov/data-and-tools/bbtools/bb-tools-user-guide/clumpify-guide/)
    # Step 1: Remove 5' amplification primer
    # Step 2: Remove 3' read through contaminant (Reverse complement of amplification primer + 6 bases of the adapter)
    # Step 3: Remove primer free adapter (both orientations)
    # Step 4: Remove adapter free primer (both orientations)
    # Step 5: PhiX Removal and vector contamination removal
    # Step 6: Host-removal
    # Step 7: Trim low-quality bases
    # Step 8: Remove bacterial contaminants reserving viral and aambiguous sequences
"""

if not config:
    sys.stderr.write("FATAL: Please define a config file using the --configfile command line option.\n")
    sys.stderr.write("examples are provided in the Git repo\n")
    sys.exit()


DBDIR = config['Paths']['Databases']

# paths for our databases
BACPATH = os.path.join(DBDIR, "bac_giant_unique_species")
HOSTPATH = os.path.join(DBDIR, "human_masked")
CONPATH = os.path.join(DBDIR, "contaminants")


if not os.path.exists(os.path.join(HOSTPATH, "ref")):
    sys.stderr.write("FATAL: You appear not to have the host databases. Please download the databases using the download_databases.snakefile\n")
    sys.exit()

# paths for our data. This is where we will read and put things
READDIR = config['Paths']['Reads']
CLUMPED = config['Output']["Clumped"]
QC = config['Output']['QC']
RESULTS = config['Output']['Results']
TMPDIR = config['Paths']['Temp']

# output directories for our amino acid searches
AA_OUT  = os.path.join(RESULTS, "mmseqs_aa_out")
AA_OUT_CHECKED  = os.path.join(RESULTS, "mmseqs_aa_checked_out")

SAMPLES, = glob_wildcards(os.path.join(READDIR, '{sample}_R1.fastq.gz'))
PATTERN_R1 = '{sample}_R1'
PATTERN_R2 = '{sample}_R2'

# paths for our databases
PROTPATH = os.path.join(DBDIR, "proteins")
if not os.path.exists(PROTPATH):
    sys.stderr.write("FATAL: You appear not to have the protein databases. Please download the databases using the download_databases.snakefile\n")
    sys.exit()

# The virus database, clustered at 99% with cd-hit and then compiled
# with mmseqs

VIRDB = os.path.join(PROTPATH, "uniprot_virus_c99.db")
if not os.path.exists(VIRDB):
    sys.stderr.write(f"FATAL: {VIRDB} does not exist. Please ensure you")
    sys.stderr.write(" have installed the databases\n")
    sys.exit()

PHAGE_LINEAGES = os.path.join(DBDIR, "phages", "phage_taxonomic_lineages.txt")
if not os.path.exists(PHAGE_LINEAGES):
    sys.stderr.write("FATAL: phages/phage_taxonomic_lineages.txt not ")
    sys.stderr.write("found in the databases directory. Please check ")
    sys.stderr.write("you have the latest version of the databases\n")
    sys.exit()

# uniref50 + viruses
URVPATH = os.path.join(PROTPATH, "uniref_plus_virus")
URVDB = os.path.join(URVPATH, "uniref50_virus.db") # uniref50 + viruses database
if not os.path.exists(URVDB):
    sys.stderr.write("FATAL: {URVDB} not found.\n")
    sys.stderr.write("Please make sure that you have run ")
    sys.stderr.write("download_databases.snakefile before commencing\n")
    sys.exit()

# Nucleotide data
NUCLPATH = os.path.join(DBDIR, "nucleotides")
NTDB = os.path.join(NUCLPATH, "refseq_virus_nt_UniVec_masked", "nt.fnaDB")
if not os.path.exists(NTDB):
    sys.stderr.write(f"FATAL: You appear not to have the nucleotide ")
    sys.stderr.write(f"database {NTDB} installed.\n")
    sys.stderr.write(f"Please download the databases using the download_databases.snakefile\n")
    sys.exit()

NT_OUT = os.path.join(RESULTS, "mmseqs_nt_out")
if not os.path.exists(NT_OUT):
    os.makedirs(NT_OUT)

NT_CHECKED_OUT = os.path.join(RESULTS, "mmseqs_nt_checked_out")
if not os.path.exists(NT_CHECKED_OUT):
    os.makedirs(NT_CHECKED_OUT)

# taxonomizr taxa
TAXPATH  = os.path.join(DBDIR, "taxonomy")
TAXTAX = os.path.join(TAXPATH, "taxonomizr_accessionTaxa.sql")
if not os.path.exists(TAXTAX):
    sys.stderr.write(f"FATAL: You appear not to have the taxonomizr ")
    sys.stderr.write(f"database {TAXTAX} installed.\n")
    sys.stderr.write(f"Please download the databases using the download_databases.snakefile\n")
    sys.exit()


include: "rules/00_contaminant_removal.smk"
include: "rules/01_contaminant_removal_hosts.smk"
include: "rules/02_cluster_count.smk"
include: "rules/03_seqtable.smk"
include: "rules/04_mmseqs_pviral_aa.smk"
include: "rules/05_mmseqs_pviral_aa_check.smk"
include: "rules/06_mmseqs_pviral_nt.smk"
# include: "rules/07_mmseqs_pviral_nt_check.smk"
# include: "rules/08_concatenate_results.smk"


rule all:
    input:
        # output of contaminant removal
        expand(os.path.join(QC, "step_9", "{sample}.viral_amb.fastq"), sample=SAMPLES),
        # output of 02_cluster_count.smk
        expand(os.path.join(QC, "counts", "{sample}_seqtable.txt"), sample=SAMPLES),
        # these two inputs are the outputs from 03_seqtable.smk
        os.path.join(RESULTS, "seqtable_all.tsv"),
        os.path.join(RESULTS, "seqtable.tab2fx"),
        # output from 04_mmseqs_pviral_aa
        os.path.join(AA_OUT, "phage_tax_table.tsv"),
        os.path.join(AA_OUT, "viruses_tax_table.tsv"),
        os.path.join(AA_OUT, "pviral_aa_unclassified_seqs.fasta"),
        # output from section 05_mmseqs_pviral_aa_check
        os.path.join(AA_OUT_CHECKED, "taxonomyResult.firsthit.m8"),
        os.path.join(AA_OUT_CHECKED, "taxonomyResult.report"),
        os.path.join(AA_OUT_CHECKED, "viruses_checked_aa_table.tsv"),
        os.path.join(AA_OUT_CHECKED, "viruses_checked_aa_tax_table.tsv"),
        os.path.join(AA_OUT_CHECKED, "unclassified_checked_aa_seqs.fasta"),
        # output from section 06_mmseqs_pviral_nt
        os.path.join(NT_OUT, "resultDB.firsthit.m8"),
        os.path.join(NT_CHECKED_OUT, "mmseqs_pviral_nt_lineage.tsv"),
